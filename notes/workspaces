# Workspace Generation

## Configuration (c4workspace.json)
```typescript
interface C4WorkspaceConfig {
    include: {
        [alias: string]: C4IncludeConfig;
    };
}

interface C4IncludeConfig {
    type: string;  // currently only "c4containers", extensible in future
    source: string | string[];  // glob patterns
}
```

Example:
```json
{
    "include": {
        "containers": {
            "type": "c4containers",
            "source": [
                "../*/c4container.json",
                "!../workspace"
            ]
        }
    }
}
```

## Template Engine
- Using LiquidJS
- Template syntax: `{{ include.ALIAS | FILTER }}`
  - `include` - fixed prefix for configuration data
  - `ALIAS` - key from include section in c4workspace.json
  - `FILTER` - data transformation function (e.g. containers, relationships, indent)

## Generator Design

### C4Generator
```typescript
class C4Generator {
    private project: Project;      // per container TypeScript project
    private parser: C4DocParser;   // could be shared
    private model: StructurizrModel;
    private validator: C4RelationValidator;

    constructor(
        containerConfig: C4ContainerConfig,  // configuration from c4container.json
        baseDir: string                      // directory containing c4container.json
    );
    generate(): C4ModelData;
    generateDSL(): string;
}
```

### Design Decisions
1. Generator per container because:
   - Each container can have different tsconfig.json
   - Clear responsibility - one generator handles one container
   - Simpler testing and maintenance

2. Configuration:
   - Using existing C4ContainerConfig interface instead of creating new one
   - baseDir (c4container.json location) as reference point for all paths
   - Assuming tsconfig.json is in the same directory as c4container.json

3. Current limitations:
   - Each generator creates own parser and validator instances
   - Cross-container relationship validation must be handled at workspace level
   - Cost of multiple Project instances
   - No parallel processing (due to process.chdir())
   - No way to specify custom tsconfig.json location

### WorkspaceService
- Responsible for:
  1. Finding container configuration files
  2. Creating and managing generators
  3. Collecting and merging results
  4. Cross-container validations

## Template Processing
- Custom filters for data transformation
- Example registrations:
```typescript
engine.registerFilter('containers', (containers: Map<string, C4ModelData>) => {
    // container generation logic
});

engine.registerFilter('relationships', (containers: Map<string, C4ModelData>) => {
    // relationship generation logic
});

engine.registerFilter('indent', (value: string, spaces: number) => {
    // indentation logic
});
```

## Validation
- Verify all template aliases exist in configuration
- Validate data type compatibility with used filters
- Validate source paths existence and accessibility 